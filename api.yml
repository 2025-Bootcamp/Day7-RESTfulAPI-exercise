openapi: '3.0.3'
info:
  title: XXX 项目 API
  version: '1.0'
servers:
  - url: http://127.0.0.1:3001/
    description: 开发环境
  - url: https://test.server.test/v1
    description: 测试环境
  - url: https://uat.server.test/v1
  - url: https://prod.server.test/v1
paths:
  /books:
    get:
      summary: 获取图书列表
      description: 分页获取所有图书信息
      tags:
        - 图书管理
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 页码
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: 每页数量
        - in: query
          name: title
          schema:
            type: string
          description: 图书标题搜索
        - in: query
          name: author
          schema:
            type: string
          description: 作者搜索
        - in: query
          name: category
          schema:
            type: string
          description: 分类筛选
      responses:
        200:
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: 当前页码
                      limit:
                        type: integer
                        description: 每页数量
                      total:
                        type: integer
                        description: 总记录数
                      totalPages:
                        type: integer
                        description: 总页数
                    required:
                      - page
                      - limit
                      - total
                      - totalPages
                required:
                  - books
                  - pagination
    post:
      summary: 创建新图书
      description: 添加一本新图书到系统
      tags:
        - 图书管理
      security:
        - bearerToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookRequest"
      responses:
        201:
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/InternalServerError"
  /books/{bookId}:
    get:
      summary: 获取图书详情
      description: 根据图书ID获取详细信息
      tags:
        - 图书管理
      parameters:
        - in: path
          name: bookId
          schema:
            type: integer
          required: true
          description: 图书ID
      responses:
        200:
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 更新图书信息
      description: 修改图书的详细信息
      tags:
        - 图书管理
      security:
        - bearerToken: []
      parameters:
        - in: path
          name: bookId
          schema:
            type: integer
          required: true
          description: 图书ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookRequest"
      responses:
        200:
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 删除图书
      description: 从系统中删除指定图书
      tags:
        - 图书管理
      security:
        - bearerToken: []
      parameters:
        - in: path
          name: bookId
          schema:
            type: integer
          required: true
          description: 图书ID
      responses:
        204:
          description: 删除成功
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /users/{userId}/books:
    get:
      summary: 获取用户的图书
      description: 获取指定用户拥有的图书列表
      tags:
        - 用户图书管理
      security:
        - bearerToken: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 用户ID
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 页码
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: 每页数量
      responses:
        200:
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  userBooks:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserBook"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: 当前页码
                      limit:
                        type: integer
                        description: 每页数量
                      total:
                        type: integer
                        description: 总记录数
                      totalPages:
                        type: integer
                        description: 总页数
                    required:
                      - page
                      - limit
                      - total
                      - totalPages
                required:
                  - userBooks
                  - pagination
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 为用户添加图书
      description: 将图书分配给指定用户
      tags:
        - 用户图书管理
      security:
        - bearerToken: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 用户ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserBookRequest"
      responses:
        201:
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBook"
        400:
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /users/{userId}/books/{bookId}:
    delete:
      summary: 移除用户的图书
      description: 从用户的书单中移除指定图书
      tags:
        - 用户图书管理
      security:
        - bearerToken: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 用户ID
        - in: path
          name: bookId
          schema:
            type: integer
          required: true
          description: 图书ID
      responses:
        204:
          description: 移除成功
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /users:
    post:
      summary: 用户注册
      description: 创建新用户账户
      tags:
        - 用户管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        201:
          description: 用户注册成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    description: 新创建的用户ID
                  username:
                    type: string
                    description: 用户名
                  email:
                    type: string
                    description: 邮箱
                  createdAt:
                    type: string
                    format: date-time
                    description: 创建时间
                required:
                  - userId
                  - username
                  - email
                  - createdAt
        400:
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: 用户名已存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    # 获取用户信息
    get:
      summary: Get a user by ID
      tags:
        - 用户管理
      # 需要登录验证
      security:
        - bearerToken: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

# Descriptions of common components
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      description: Request format is correct but semantic errors exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  # authorizations
  securitySchemes:
    bearerToken: # <-- Bearer token authentication
      type: http
      scheme: Bearer

  schemas:
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    User:
      type: object
      properties:
        userId: 
          type: number
        username:
          type: string
        age:
          type: integer
        avatar: # <-- image embedded into JSON
          type: string
          format: byte
          description: Base64-encoded contents of the avatar image

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+$'
          description: 用户名，只能包含字母、数字和下划线
        email:
          type: string
          format: email
          description: 用户邮箱
        password:
          type: string
          minLength: 6
          maxLength: 50
          description: 用户密码
        confirmPassword:
          type: string
          description: 确认密码
        age:
          type: integer
          minimum: 1
          maximum: 120
          description: 用户年龄
        phone:
          type: string
          pattern: '^1[3-9]\\d{9}$'
          description: 手机号码（可选）
      required:
        - username
        - email
        - password
        - confirmPassword

    Book:
      type: object
      properties:
        bookId:
          type: integer
          description: 图书ID
        title:
          type: string
          description: 图书标题
        author:
          type: string
          description: 作者
        isbn:
          type: string
          description: ISBN号
        category:
          type: string
          description: 分类
        description:
          type: string
          description: 图书描述
        price:
          type: number
          format: float
          description: 价格
        publishDate:
          type: string
          format: date
          description: 出版日期
        publisher:
          type: string
          description: 出版社
        pages:
          type: integer
          description: 页数
        language:
          type: string
          description: 语言
        coverImage:
          type: string
          description: 封面图片URL
        status:
          type: string
          enum: [available, borrowed, reserved]
          description: 图书状态
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
      required:
        - bookId
        - title
        - author
    CreateBookRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: 图书标题
        author:
          type: string
          minLength: 1
          maxLength: 100
          description: 作者
        isbn:
          type: string
          pattern: '^[0-9-]{10,17}$'
          description: ISBN号
        category:
          type: string
          description: 分类
        description:
          type: string
          maxLength: 1000
          description: 图书描述
        price:
          type: number
          minimum: 0
          description: 价格
        publishDate:
          type: string
          format: date
          description: 出版日期
        publisher:
          type: string
          description: 出版社
        pages:
          type: integer
          minimum: 1
          description: 页数
        language:
          type: string
          description: 语言
        coverImage:
          type: string
          format: uri
          description: 封面图片URL
      required:
        - title
        - author
        - isbn
    UpdateBookRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: 图书标题
        author:
          type: string
          minLength: 1
          maxLength: 100
          description: 作者
        isbn:
          type: string
          pattern: '^[0-9-]{10,17}$'
          description: ISBN号
        category:
          type: string
          description: 分类
        description:
          type: string
          maxLength: 1000
          description: 图书描述
        price:
          type: number
          minimum: 0
          description: 价格
        publishDate:
          type: string
          format: date
          description: 出版日期
        publisher:
          type: string
          description: 出版社
        pages:
          type: integer
          minimum: 1
          description: 页数
        language:
          type: string
          description: 语言
        coverImage:
          type: string
          format: uri
          description: 封面图片URL
        status:
          type: string
          enum: [available, borrowed, reserved]
          description: 图书状态


    UserBook:
      type: object
      properties:
        userBookId:
          type: integer
          description: 用户图书关系ID
        userId:
          type: integer
          description: 用户ID
        bookId:
          type: integer
          description: 图书ID
        book:
          $ref: "#/components/schemas/Book"
          description: 图书信息
        addedAt:
          type: string
          format: date-time
          description: 添加时间
        status:
          type: string
          enum: [reading, completed, wishlist]
          description: 阅读状态
      required:
        - userBookId
        - userId
        - bookId
    AddUserBookRequest:
      type: object
      properties:
        bookId:
          type: integer
          description: 图书ID
        status:
          type: string
          enum: [reading, completed, wishlist]
          default: wishlist
          description: 阅读状态
      required:
        - bookId

